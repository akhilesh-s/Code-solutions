
//postorder traversal

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<pair<TreeNode*, int>> s;
        s.push({root,0});
        while(!s.empty())
        {
            TreeNode* cur=s.top().first;   
            int state=s.top().second;
            s.pop();
            if(state==3 || cur==NULL)
                continue;
            s.push({cur,state+1});
            if(state==0)
                s.push({cur->left,0});
            else if(state==1)
                s.push({cur->right,0});
            else 
                res.push_back(cur->val);
            
        }
        return res;
        
    }
};

//inorder traversal

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<pair<TreeNode*, int>> s;
        s.push({root,0});
        while(!s.empty())
        {
            TreeNode* cur=s.top().first;   
            int state=s.top().second;
            s.pop();
            if(state==3 || cur==NULL)
                continue;
            s.push({cur,state+1});
            if(state==0)
                s.push({cur->left,0});
            else if(state==1)
                res.push_back(cur->val);
            else 
                s.push({cur->right,0});
            
        }
        return res;
        
    }
};

//preorder traversal

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<pair<TreeNode*, int>> s;
        s.push({root,0});
        while(!s.empty())
        {
            TreeNode* cur=s.top().first;   
            int state=s.top().second;
            s.pop();
            if(state==3 || cur==NULL)
                continue;
            s.push({cur,state+1});
            if(state==0)
                res.push_back(cur->val);
            else if(state==1)
                s.push({cur->left,0});
            else 
                s.push({cur->right,0});
            
        }
        return res;
        
    }
};
